--FINAL MAIN TABLE
WITH dual_platform_apps AS (SELECT name, 
	   							app.price::money AS app_price, 
	   							play.price::money AS play_price, 
	   							app.primary_genre AS app_genre, 
	  				    		play.genres AS play_genre, 
	   							play.content_rating AS play_content_rating,
	   							app.content_rating AS app_content_rating,
	  				    	SUM(app.review_count::numeric)+SUM(play.review_count::numeric) AS total_review_count,
	   							ROUND(((play.rating+app.rating)/2),2) AS avg_rating
							FROM app_store_apps AS app
							INNER JOIN play_store_apps AS play
							USING (name)
							GROUP BY name, app.price, play.price, app.primary_genre, 
									 play.genres, play.content_rating, app.content_rating, play.rating, app.rating
							ORDER BY avg_rating DESC),
     investment_values AS (SELECT name, 
								ROUND(ROUND(avg_rating * 2,0)/2,1) AS rounded_avg_rating,
								ROUND(((ROUND(avg_rating *2,0)/2)*24)+12,0) AS lifespan_months,
								(app_price * 10000)::money AS app_investment,
								(play_price * 10000)::money AS play_investment,
								(ROUND(((ROUND(avg_rating *2,0)/2)*24)+12,0) * 1000)::money AS total_marketing_cost,
								(ROUND(((ROUND(avg_rating *2,0)/2)*24)+12,0) * 5000)::money AS total_revenue_apptrader,
								(ROUND(((ROUND(avg_rating *2,0)/2)*24)+12,0) * 5000)::money -
								(ROUND(((ROUND(avg_rating *2,0)/2)*24)+12,0) * 1000)::money AS net_profit_apptrader,
								CASE WHEN app_price < '1' THEN '10,000' 
						   			 WHEN app_price >= '1' THEN app_price END AS app_low_app,
								CASE WHEN play_price <'1' THEN '10,000' 
						             WHEN play_price >= '1' THEN play_price END AS play_low_app
						    FROM dual_platform_apps),
	final_investment_price AS (SELECT name, 
									  lifespan_months,
									   total_marketing_cost,
									   total_revenue_apptrader,
									   app_investment,
									   play_investment,
									   (app_investment + play_investment + app_low_app::money + play_low_app::money)AS total_initial_investment  
								FROM investment_values
								GROUP BY name, app_investment, play_investment, app_low_app, play_low_app, lifespan_months, total_marketing_cost,
										 total_revenue_apptrader, app_investment, play_investment)
SELECT name,
	   dual_platform_apps.avg_rating,
	   investment_values.lifespan_months,
	   app_genre, 
	   play_genre, 
	   play_content_rating,
	   app_content_rating,
	   total_initial_investment,
	   investment_values.total_marketing_cost,
	   (net_profit_apptrader - total_initial_investment) AS total_net_profit,
	   CEILING((total_initial_investment/4000)::numeric) AS month_break_even,
	    CASE WHEN total_review_count <=250000 THEN 'low'
	   	    WHEN total_review_count >250000 AND total_review_count< 1000000 THEN 'moderate'
			WHEN total_review_count >=1000000 THEN 'high' END as popularity_review_count
FROM final_investment_price
FULL JOIN investment_values
USING (name)
FULL JOIN dual_platform_apps
USING (name)
WHERE app_genre IN ('Education', 'Entertainment', 'Games')
GROUP BY name, app_genre,play_genre,play_content_rating,app_content_rating, net_profit_apptrader, total_initial_investment,
investment_values.lifespan_months, dual_platform_apps.avg_rating, total_review_count, investment_values.total_marketing_cost
ORDER BY total_net_profit DESC;


--LISESPAN IN MONTHS						
WITH dual_platform_apps AS (SELECT name, app.price::money AS app_price,
	   								play.price::money AS play_price, app.primary_genre AS app_genre,
	   								play.genres AS play_genre, play.content_rating AS play_content_rating,
	   								app.content_rating AS app_content_rating, 
									SUM(app.review_count::numeric)+SUM(play.review_count::numeric) AS total_review_count,
	   								ROUND(((play.rating+app.rating)/2),2) AS avg_rating
								FROM app_store_apps AS app
								INNER JOIN play_store_apps AS play
								USING (name)
								GROUP BY name, app.price, play.price, app.primary_genre, 
									play.genres, play.content_rating, app.content_rating, 
								    play.rating, app.rating
								ORDER BY avg_rating DESC)
SELECT name, ROUND(ROUND(avg_rating * 2, 0) / 2, 1) AS rounded_avg_rtaing, 
	   ROUND(((ROUND(avg_rating * 2, 0) / 2)*24)+12,0) AS lifespan_months
FROM dual_platform_apps


--RETURN OF INVESTMENT
WITH dual_platform_apps AS (SELECT name, app.price::money AS app_price,
	   								play.price::money AS play_price, app.primary_genre AS app_genre,
	   								play.genres AS play_genre, play.content_rating AS play_content_rating,
	   								app.content_rating AS app_content_rating, 
									SUM(app.review_count::numeric)+SUM(play.review_count::numeric) AS total_review_count,
	   								ROUND(((play.rating+app.rating)/2),2) AS avg_rating
								FROM app_store_apps AS app
								INNER JOIN play_store_apps AS play
								USING (name)
								GROUP BY name, app.price, play.price, app.primary_genre, 
									play.genres, play.content_rating, app.content_rating, 
								    play.rating, app.rating
								ORDER BY avg_rating DESC),
	investment_values AS (SELECT name, ROUND(ROUND(avg_rating * 2, 0) / 2, 1) AS rounded_avg_rating, 
	   							ROUND(((ROUND(avg_rating * 2, 0) / 2)*24)+12,0) AS lifespan_months,
	   							(app_price * 10000)::money AS apple_initial_investment, (play_price * 10000)::money AS play_initial_investment,
	    						CASE WHEN app_price < '1' THEN '10000' 
						  			WHEN app_price >= '1' THEN app_price END AS low_cost_apple,
		 						CASE WHEN play_price < '1' THEN '10000' 
						  			WHEN play_price >= '1' THEN play_price END AS low_cost_google,
	   							(ROUND(((ROUND(avg_rating * 2, 0) / 2)*24)+12,0) * 1000)::money AS total_marketing_cost,
								(ROUND(((ROUND(avg_rating * 2, 0) / 2)*24)+12,0) * 5000)::money AS total_revenue_apptrader,
								((ROUND(((ROUND(avg_rating * 2, 0) / 2)*24)+12,0) * 5000) - 
		 						(ROUND(((ROUND(avg_rating * 2, 0) / 2)*24)+12,0) * 1000))::money AS net_profit_apptrader
								FROM dual_platform_apps),
	total_investment_price AS (SELECT name, ((apple_initial_investment::money) + (play_initial_investment::money) + 
											 (low_cost_apple::money) + (low_cost_google::money)) AS total_initial_investment
								FROM investment_values
								ORDER BY total_initial_investment DESC)
SELECT name, lifespan_months, total_marketing_cost, total_revenue_apptrader, 
		(net_profit_apptrader - total_initial_investment) AS total_net_profit, total_initial_investment,
		CEILING((total_initial_investment / 4000)::numeric) AS months_break_even
FROM total_investment_price
INNER JOIN investment_values
USING(name)
						  

--POPULARITY
WITH dual_platform_apps AS (SELECT name, app.price::money AS app_price,
	   							play.price::money AS play_price, app.primary_genre AS app_genre,
	   							play.genres AS play_genre, play.content_rating AS play_content_rating,
	   							app.content_rating AS app_content_rating,
	   						SUM(app.review_count::numeric)+SUM(play.review_count::numeric) AS total_review_count,
	   							ROUND(((play.rating+app.rating)/2),2) AS avg_rating
							FROM app_store_apps AS app
							INNER JOIN play_store_apps AS play
							USING (name)
							GROUP BY name, app.price, play.price, app.primary_genre, play.genres, 
								play.content_rating, app.content_rating, play.rating, app.rating
ORDER BY avg_rating DESC)
SELECT *,
CASE WHEN total_review_count <=250000 THEN 'low'
	   	    WHEN total_review_count >250000 AND total_review_count< 1000000 THEN 'moderate'
			WHEN total_review_count >=1000000 THEN 'high' END as popularity_review_count
FROM dual_platform_apps